Index: src/GUI/Controller/PrivateMovieController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GUI.Controller;\r\n\r\nimport BE.Category;\r\nimport BE.Movie;\r\nimport GUI.Model.BaseModel;\r\nimport GUI.Model.CategoryModel;\r\nimport GUI.Model.MovieModel;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\n\r\nimport java.io.IOException;\r\nimport java.awt.*;\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class PrivateMovieController extends BaseController implements Initializable {\r\n    @FXML\r\n    public ListView<Category> lstCategory;\r\n    @FXML\r\n    public TableView<Movie> tblMovie;\r\n    @FXML\r\n    public TextField txtMovieSearch;\r\n    public Button btnClose;\r\n    @FXML\r\n    private Button btnaddCategory, btndeleteCategory, btnaddMovie, btndeleteMovie, btnPLay;\r\n    @FXML\r\n    private TableColumn<Movie, String> ColYear, ColIMDB, ColPRating, ColTitle;\r\n\r\n    public MovieModel movieModel;\r\n\r\n    public CategoryModel categoryModel;\r\n\r\n    public PrivateMovieController(){\r\n\r\n        try {\r\n            movieModel = new MovieModel();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void initialize(URL location, ResourceBundle resources)\r\n    {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void setup()\r\n    {\r\n        movieModel = getModel().getMovieModel();\r\n        categoryModel = getModel().getCategoryModel();\r\n\r\n\r\n        tblMovie.setItems(movieModel.getObservableMovies());\r\n        lstCategory.setItems(categoryModel.getObservableCategories());\r\n\r\n\r\n        if (tblMovie.getSelectionModel().getSelectedItem() != null){\r\n            btnPLay.setDisable(false);\r\n        }\r\n\r\n        txtMovieSearch.textProperty().addListener((observableValue, oldValue, newValue) -> {\r\n            try {\r\n                movieModel.searchMovie(newValue);\r\n            } catch (Exception e) {\r\n                //displayError(e);\r\n            }\r\n        });\r\n\r\n    tblMovie.setItems(movieModel.getObservableMovies());\r\n\r\n        ColTitle.setCellValueFactory(c -> new SimpleObjectProperty(c.getValue().getMovieTitle()));\r\n        ColIMDB.setCellValueFactory(c -> new SimpleObjectProperty(String.valueOf(c.getValue().getImdbRating())));\r\n        ColPRating.setCellValueFactory(c -> new SimpleObjectProperty(String.valueOf(c.getValue().getPersonalRating())));\r\n        ColYear.setCellValueFactory(c -> new SimpleObjectProperty(String.valueOf(c.getValue().getYear())));\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    public void handeladdMovie(ActionEvent actionEvent) throws IOException {\r\n        // Finds where the fxml is located.\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/GUI/View/NewMovieView.fxml\"));\r\n        // Loads the stage.\r\n        Parent root = loader.load();\r\n\r\n        NewMovieController controller = loader.getController();\r\n        controller.setModel(super.getModel());\r\n        controller.setup();\r\n\r\n        // Makes the new stage.\r\n        Stage stage = new Stage();\r\n        // Title of the stage.\r\n        stage.initModality(Modality.APPLICATION_MODAL);\r\n        stage.setScene(new Scene(root));\r\n        root.getStylesheets().add(getClass().getResource(\"PopUp.css\").toExternalForm());\r\n        stage.initStyle(StageStyle.UNDECORATED);\r\n        // The stage is then displayed and the program waits for\r\n        // the user to interact with the delete song dialog.\r\n        stage.showAndWait();\r\n    }\r\n\r\n    public void handelDeleteMovie(ActionEvent actionEvent) {\r\n        try {\r\n\r\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n            alert.setHeaderText(\"Are you sure you wanna delete this movie?\");\r\n            alert.initStyle(StageStyle.UNDECORATED);\r\n\r\n            DialogPane dialogPane = alert.getDialogPane();\r\n            dialogPane.getStylesheets().add(getClass().getResource(\"PopUp.css\").toExternalForm());\r\n            dialogPane.getStyleClass().add(\"myDialog\");\r\n\r\n            alert.showAndWait();\r\n            if(alert.getResult() == ButtonType.OK) {\r\n               movieModel.deleteMovie(tblMovie.getSelectionModel().getSelectedItem());\r\n            }\r\n        } catch (Exception e){\r\n            //displayError(e);\r\n\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void handeladdCategory(ActionEvent actionEvent) throws IOException {\r\n        System.out.println(\"AddCategory\");\r\n        // Finds where the fxml is located.\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/GUI/View/NewCategoryView.fxml\"));\r\n        // Loads the stage.\r\n        Parent root = fxmlLoader.load();\r\n        // Makes the new stage.\r\n        Stage stage = new Stage();\r\n        // Title of the stage<\r\n        stage.initModality(Modality.APPLICATION_MODAL);\r\n        stage.setScene(new Scene(root));\r\n        root.getStylesheets().add(getClass().getResource(\"PopUp.css\").toExternalForm());\r\n        stage.initStyle(StageStyle.UNDECORATED);\r\n        // The stage is then displayed and the program waits for\r\n        // the user to interact with the delete song dialog.\r\n        stage.showAndWait();\r\n    }\r\n\r\n    public void handeldeleteCategory(ActionEvent actionEvent) {\r\n        System.out.println(\"delete categary\");\r\n        try {\r\n\r\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n            alert.setHeaderText(\"Are you sure you wanna delete this category?\");\r\n            alert.initStyle(StageStyle.UNDECORATED);\r\n\r\n            DialogPane dialogPane = alert.getDialogPane();\r\n            dialogPane.getStylesheets().add(getClass().getResource(\"PopUp.css\").toExternalForm());\r\n            dialogPane.getStyleClass().add(\"myDialog\");\r\n\r\n            alert.showAndWait();\r\n            if(alert.getResult() == ButtonType.OK) {\r\n                System.out.println(\"you have now deleted the category\");\r\n                categoryModel.deleteCategory(lstCategory.getSelectionModel().getSelectedItem());\r\n            }\r\n        } catch (Exception e){\r\n            //displayError(e);\r\n\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void handelPlay(ActionEvent actionEvent) throws IOException {\r\n\r\n        //File file = new File(\"/Users/magnus/Documents/IMG_iii1652.MOV\");\r\n        //Desktop.getDesktop().open(file);\r\n\r\n\r\n        File name = new File(tblMovie.getSelectionModel().getSelectedItem().getFilePath());\r\n        System.out.println(\"kuisfhbd\");\r\n\r\n        Desktop.getDesktop().open(name);\r\n\r\n    }\r\n\r\n    public void handleCloseApp(ActionEvent actionEvent)\r\n    {\r\n        // This code closes the current window by getting a reference to the stage\r\n        // and calling the close() method.\r\n        Node source = (Node) actionEvent.getSource();\r\n        Stage stage = (Stage) source.getScene().getWindow();\r\n        stage.close();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/Controller/PrivateMovieController.java b/src/GUI/Controller/PrivateMovieController.java
--- a/src/GUI/Controller/PrivateMovieController.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/GUI/Controller/PrivateMovieController.java	(date 1673336576449)
@@ -180,6 +180,7 @@
         }
     }
 
+
     public void handelPlay(ActionEvent actionEvent) throws IOException {
 
         //File file = new File("/Users/magnus/Documents/IMG_iii1652.MOV");
Index: src/GUI/Controller/NewMovieController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GUI.Controller;\r\n\r\nimport GUI.Model.MovieModel;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.media.Media;\r\nimport javafx.stage.FileChooser;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.StageStyle;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\n\r\npublic class NewMovieController extends BaseController{\r\n\r\n    public Button btnNext, btnCancel, btnChoose;\r\n    public Label lblFile, lblTitle, lblIMDBRating, lblPersonalRating, lblYear;\r\n    public TextField txtfFile, txtfTitle, txtfIMDBRating, txtfPersonalRating, txtfYear;\r\n    private File mFile;\r\n    public String fileMoviePath = \"Movies/more\";\r\n    private Path target = Paths.get(fileMoviePath);\r\n    private MovieModel movieModel;\r\n\r\n    @Override\r\n    public void setup() {\r\n        movieModel = getModel().getMovieModel();\r\n    }\r\n\r\n\r\n    public void handelNext(ActionEvent actionEvent) throws IOException {\r\n        String title = txtfTitle.getText();\r\n        double imdbrating = Double.parseDouble(txtfIMDBRating.getText());\r\n        int personalrating = Integer.parseInt(txtfPersonalRating.getText());\r\n        String filepath = txtfFile.getText();\r\n        double lastviewed = 0.0;\r\n        int year = Integer.parseInt(txtfYear.getText());\r\n\r\n        try {\r\n            Files.copy(mFile.toPath(), target.resolve(mFile.toPath().getFileName()));\r\n\r\n            mFile = new File(fileMoviePath + \"/\" + mFile.getName());\r\n            movieModel.createMovie(title, imdbrating, personalrating, filepath, lastviewed, year);\r\n            //Path mFile = Paths.get(\"C:/Users/Mathias Kær/Desktop/mp4 Movie\");\r\n            //Path fileMoviePath = Paths.get(\"Movies\");\r\n\r\n            //Files.copy(Path.of(fileMoviePath),target.resolve(mFile.toPath().getFileName()));\r\n            //Files.copy(mFile.toPath(),target.resolve(mFile.toPath().getFileName()));\r\n\r\n            System.out.println(\"Movie added: \" + filepath + \", \" + title + \", \" + imdbrating +\r\n                    \", \" + personalrating + \", \" + year);\r\n        }         catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n/*\r\n        try{\r\n            movieModel.createMovie(title, imdbrating, personalrating, filepath, lastviewed, year);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n*/\r\n\r\n        // Finds where the fxml is located.\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/GUI/View/DropDownMovieView.fxml\"));\r\n        // Loads the stage.\r\n        Parent root = fxmlLoader.load();\r\n        // Makes the new stage.\r\n        Stage stage = new Stage();\r\n        // Title of the stage.\r\n        stage.initModality(Modality.APPLICATION_MODAL);\r\n        stage.setScene(new Scene(root));\r\n        root.getStylesheets().add(getClass().getResource(\"PopUp.css\").toExternalForm());\r\n        stage.initStyle(StageStyle.UNDECORATED);\r\n        // The stage is then displayed and the program waits for\r\n        // the user to interact with the delete song dialog.\r\n        stage.showAndWait();\r\n\r\n        Node source = (Node) actionEvent.getSource();\r\n        Stage mStage = (Stage) source.getScene().getWindow();\r\n        mStage.close();\r\n\r\n\r\n    }\r\n\r\n    public void handleButtonCancel(ActionEvent actionEvent) {\r\n        // This code closes the current window by getting a reference to the stage\r\n        // and calling the close() method.\r\n        Node source = (Node) actionEvent.getSource();\r\n        Stage stage = (Stage) source.getScene().getWindow();\r\n        stage.close();\r\n    }\r\n    public void handleChoose(ActionEvent actionEvent) {\r\n        //Opens file browser to select a file\r\n        Stage stage = new Stage();\r\n        FileChooser mFileChooser = new FileChooser();\r\n        mFile = mFileChooser.showOpenDialog(stage);\r\n       txtfFile.setText(mFile.getPath());\r\n\r\n\r\n        System.out.println(\"Selected file \" + mFile);\r\n        System.out.println(getMovieLength(mFile).toString());\r\n\r\n    }\r\n\r\n    public Duration getMovieLength(File file){\r\n        Media mMedia = new Media(\"file:///\" + file.getPath().replace(\"\\\\\",\"/\").replaceAll(\" \",\"%20\"));\r\n        return mMedia.getDuration();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/Controller/NewMovieController.java b/src/GUI/Controller/NewMovieController.java
--- a/src/GUI/Controller/NewMovieController.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/GUI/Controller/NewMovieController.java	(date 1673339206661)
@@ -1,5 +1,6 @@
 package GUI.Controller;
 
+import BE.Movie;
 import GUI.Model.MovieModel;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXMLLoader;
@@ -114,7 +115,21 @@
         System.out.println(getMovieLength(mFile).toString());
 
     }
+    public void handlePersonalRating(ActionEvent actionEvent) throws Exception
+    {
+        String updatedtitle = txtfTitle.getText();
+        double updatesimdbrating = Double.parseDouble(txtfIMDBRating.getText());
+        int updatedpersonalrating = Integer.parseInt(txtfPersonalRating.getText());
+        String updatedfilepath = txtfFile.getText();
+        double updatedlastviewed = 0.0;
+        int updatedyear = Integer.parseInt(txtfYear.getText());
+
+        movieModel.updateMovie(new Movie(movieModel.getSelectedMovie().getId(), updatedtitle, updatesimdbrating, updatedpersonalrating, updatedfilepath, updatedlastviewed, updatedyear));
 
+
+        Stage stage = (Stage) ((Node)actionEvent.getSource()).getScene().getWindow();
+        stage.close();
+    }
     public Duration getMovieLength(File file){
         Media mMedia = new Media("file:///" + file.getPath().replace("\\","/").replaceAll(" ","%20"));
         return mMedia.getDuration();
Index: src/DAL/db/MovieDAO_DB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DAL.db;\r\n\r\nimport BE.Movie;\r\nimport DAL.IMovieDataAccess;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\nimport javax.xml.crypto.Data;\r\nimport java.sql.*;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport java.util.List;\r\n\r\n\r\npublic class MovieDAO_DB implements IMovieDataAccess\r\n{\r\n    private DataBaseConnecter dataBaseConnecter;\r\n\r\n    public MovieDAO_DB()\r\n    {\r\n        dataBaseConnecter = new DataBaseConnecter();\r\n    }\r\n\r\n    @Override\r\n    public List<Movie> getAllMovie() throws Exception {\r\n\r\n        ArrayList<Movie> allMovie = new ArrayList<>();\r\n\r\n        try (Connection conn = dataBaseConnecter.getConnection()) {\r\n            String sql = \"SELECT * FROM Movie;\";\r\n\r\n            Statement stmt = conn.createStatement();\r\n            ResultSet rs = stmt.executeQuery(sql);\r\n\r\n            while (rs.next())\r\n            {\r\n                int id = rs.getInt(\"Id\");\r\n                String movieTitle = rs.getString(\"Title\");\r\n                double imdbrating = rs.getDouble(\"IMDB_Rating\");\r\n                int personalrating = rs.getInt(\"Personal_Rating\");\r\n                String filepath = rs.getString(\"FileLink\");\r\n                double lastviewed = rs.getDouble(\"LastView\");\r\n                int year = rs.getInt(\"Year\");\r\n\r\n                Movie movie = new Movie (id,movieTitle,imdbrating,personalrating,filepath,lastviewed,year);\r\n                allMovie.add(movie);\r\n            }\r\n            return allMovie;\r\n        }\r\n        catch (SQLException ex)\r\n        {\r\n            ex.printStackTrace();\r\n            throw new Exception(\"Could not get movies from database\", ex);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Movie createMovie(String movieTitle, Double imdbrating, int personalrating, String filepath, Double lastviewed, int year) throws Exception {\r\n        //Creating a movie in the database by using a SQL query.\r\n        String sql = \"INSERT INTO Movie (Title, IMDB_Rating, Personal_Rating, FileLink, LastView, Year) VALUES (?,?,?,?,?,?);\";\r\n        try(Connection conn = dataBaseConnecter.getConnection()) {\r\n            PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\r\n\r\n            //Binding parameters.\r\n            stmt.setString(1,movieTitle);\r\n            stmt.setDouble(2, imdbrating);\r\n            stmt.setInt(3, personalrating);\r\n            stmt.setString(4, filepath);\r\n            stmt.setDouble(5, lastviewed);\r\n            stmt.setInt(6, year);\r\n\r\n            //Run the SQL statement.\r\n            stmt.executeUpdate();\r\n\r\n            //Get the ID from the database\r\n            ResultSet rs = stmt.getGeneratedKeys();\r\n            int id = 0;\r\n\r\n            if(rs.next()){\r\n                id = rs.getInt(1);\r\n        }\r\n            //Create the movie.\r\n            Movie movie = new Movie(id,movieTitle,imdbrating,personalrating,filepath,lastviewed,year);\r\n            return movie;\r\n        }\r\n        catch (SQLException ex){\r\n            ex.printStackTrace();\r\n            throw new Exception(\"Could not create movie\", ex);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Movie deleteMovies(Movie movie) throws Exception {\r\n        //Delete the selected movie based on a specific id.\r\n        String sql = \"DELETE FROM Movie WHERE id = ?\";\r\n        try(Connection conn = dataBaseConnecter.getConnection()) {\r\n            PreparedStatement stmt = conn.prepareStatement(sql);\r\n            stmt.setInt(1, movie.getId());\r\n\r\n\r\n            int rowsDeleted = stmt.executeUpdate();\r\n            // It checks if there was a row that have been deleted, that means if it is less than 0.\r\n            if (rowsDeleted > 0)\r\n            {\r\n                System.out.println(\"Movie was successfully deleted\");\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n            throw new Exception(\"Could not delete movie\", ex);\r\n        }\r\n        return movie;\r\n    }\r\n\r\n    public Movie getFilePath (Movie selectedMovie) throws Exception {\r\n\r\n        String sql = \" SELECT FROM Movie WHERE id = ?\";\r\n\r\n        try(Connection conn = dataBaseConnecter.getConnection()) {\r\n            PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\r\n            ResultSet rs = stmt.getGeneratedKeys();\r\n\r\n\r\n            stmt.setString(4, selectedMovie.getFilePath());\r\n\r\n            if (rs.next())\r\n            {\r\n                rs.getString(4);\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n            throw new Exception(\"Could not retrive filePath\", ex);\r\n\r\n        }\r\n        return selectedMovie;\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAL/db/MovieDAO_DB.java b/src/DAL/db/MovieDAO_DB.java
--- a/src/DAL/db/MovieDAO_DB.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/DAL/db/MovieDAO_DB.java	(date 1673334944918)
@@ -139,5 +139,25 @@
 
     }
 
+    public void personalRating(Movie movie) throws Exception {
+
+        try (Connection conn = dataBaseConnecter.getConnection()) {
+
+            String sql = "UPDATE Movie SET personalRating =? WHERE Id = ?";
+
+            PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
+
+            //Bind parameter
+
+            stmt.setInt(3, updatedMovie.getPersonalRating());
+
+            stmt.executeUpdate();
+        }
+        catch (SQLException ex){
+            ex.printStackTrace();
+            throw new Exception("Could not add Personal Rating...", ex);
+        }
+    }
+
 }
 
Index: src/BLL/MovieManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BLL;\r\n\r\nimport BE.Movie;\r\nimport BLL.unit.MovieSearcher;\r\nimport DAL.IMovieDataAccess;\r\nimport DAL.db.MovieDAO_DB;\r\n\r\nimport java.util.List;\r\n\r\npublic class MovieManager {\r\n\r\n    private IMovieDataAccess movieDAO_DB;\r\n\r\n    private MovieSearcher movieSearcher = new MovieSearcher();\r\n\r\n    public MovieManager(){movieDAO_DB = new MovieDAO_DB();}\r\n\r\n    public List<Movie> getAllMovies() throws Exception {\r\n        return movieDAO_DB.getAllMovie();\r\n    }\r\n\r\n    public List<Movie> searchMovies(String query) throws Exception {\r\n        List<Movie> allMovies = getAllMovies();\r\n        List<Movie> searchResult = movieSearcher.search(allMovies, query);\r\n        return searchResult;\r\n    }\r\n\r\n    public Movie createMovie(String movieTitle, Double imdbRating, int personalrating, String filepath, Double lastviewed, int year) throws Exception {\r\n        return movieDAO_DB.createMovie(movieTitle,imdbRating,personalrating,filepath,lastviewed,year);\r\n    }\r\n    public void deleteMovie(Movie movie) throws Exception{\r\n        movieDAO_DB.deleteMovies(movie);\r\n    }\r\n    public Movie getFilePath(Movie selectedMovie) throws Exception{\r\n        movieDAO_DB.getFilePath(selectedMovie);\r\n        return selectedMovie;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/BLL/MovieManager.java b/src/BLL/MovieManager.java
--- a/src/BLL/MovieManager.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/BLL/MovieManager.java	(date 1673307951246)
@@ -35,5 +35,10 @@
         movieDAO_DB.getFilePath(selectedMovie);
         return selectedMovie;
     }
+    public Movie personalRating(Movie updatedMovie) throws Exception {
+        movieDAO_DB.updateMovie(updatedMovie);
+        return updatedMovie;
+
+    }
 
 }
Index: src/GUI/Model/MovieModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GUI.Model;\r\n\r\nimport BE.Movie;\r\nimport BLL.MovieManager;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\n\r\nimport java.util.List;\r\n\r\npublic class MovieModel {\r\n    private ObservableList<Movie> moviesToBeViewed;\r\n\r\n    private MovieManager movieManager;\r\n\r\n    public MovieModel() throws Exception {\r\n        movieManager = new MovieManager();\r\n        moviesToBeViewed = FXCollections.observableArrayList();\r\n        moviesToBeViewed.addAll(movieManager.getAllMovies());\r\n    }\r\n\r\n\r\n    public void searchMovie(String query) throws Exception {\r\n        List<Movie> searchResults = movieManager.searchMovies(query);\r\n       moviesToBeViewed.clear();\r\n       moviesToBeViewed.addAll(searchResults);\r\n    }\r\n\r\n\r\n    public ObservableList<Movie> getObservableMovies(){\r\n        return moviesToBeViewed;\r\n    }\r\n\r\n    public void createMovie(String movieTitle, Double imdbrating, int personalrating, String filepath, Double lastviewed, int year) throws Exception {\r\n        Movie m = movieManager.createMovie(movieTitle, imdbrating, personalrating, filepath,lastviewed,year);\r\n        moviesToBeViewed.add(m);\r\n        moviesToBeViewed.clear();\r\n        moviesToBeViewed.addAll(movieManager.getAllMovies());\r\n\r\n    }\r\n    public void deleteMovie(Movie movie) throws Exception{\r\n        movieManager.deleteMovie(movie);\r\n        moviesToBeViewed.remove(movie);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUI/Model/MovieModel.java b/src/GUI/Model/MovieModel.java
--- a/src/GUI/Model/MovieModel.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/GUI/Model/MovieModel.java	(date 1673339206626)
@@ -41,4 +41,7 @@
         movieManager.deleteMovie(movie);
         moviesToBeViewed.remove(movie);
     }
+    public void personalRating(Movie updatedMovie) throws Exception;{
+        movieManager.personalRating(updatedMovie);
+    }
 }
Index: src/DAL/IMovieDataAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DAL;\r\n\r\nimport BE.Movie;\r\n\r\nimport java.util.List;\r\n\r\npublic interface IMovieDataAccess {\r\n    public List<Movie> getAllMovie() throws Exception;\r\n    public Movie createMovie(String movieTitle, Double imdbrating, int personalrating, String filepath, Double lastviewed, int year) throws Exception;\r\n    public Movie deleteMovies(Movie movie) throws Exception;\r\n    public Movie getFilePath(Movie selectedMovie) throws Exception;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/DAL/IMovieDataAccess.java b/src/DAL/IMovieDataAccess.java
--- a/src/DAL/IMovieDataAccess.java	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/src/DAL/IMovieDataAccess.java	(date 1673307951273)
@@ -9,5 +9,6 @@
     public Movie createMovie(String movieTitle, Double imdbrating, int personalrating, String filepath, Double lastviewed, int year) throws Exception;
     public Movie deleteMovies(Movie movie) throws Exception;
     public Movie getFilePath(Movie selectedMovie) throws Exception;
+    public void personalRating(Movie movie) throws Exception;
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"51fa20b6-3b81-48b4-b630-6d9537a82373\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2JoIee1OSkJOdUkOugs6zkzgqiq\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2045977&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/Recources/Movies\" />\r\n      <recent name=\"$PROJECT_DIR$/Recources\" />\r\n      <recent name=\"C:\\Users\\Mathias Kær\\Desktop\\Skole\\SCO1. semester\\Intelji IDEA\\MyTunes projekt\\Ideer til layout\\My Tuunes\\My Tuunes new\\PrivateMovieCollection\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"PrivateMovieCollection\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"51fa20b6-3b81-48b4-b630-6d9537a82373\" name=\"Changes\" comment=\"\" />\r\n      <created>1672738107052</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1672738107052</updated>\r\n      <workItem from=\"1672738753127\" duration=\"847000\" />\r\n      <workItem from=\"1672819217711\" duration=\"396000\" />\r\n      <workItem from=\"1672823509669\" duration=\"4546000\" />\r\n      <workItem from=\"1672831623114\" duration=\"97000\" />\r\n      <workItem from=\"1672831822325\" duration=\"704000\" />\r\n      <workItem from=\"1672994293854\" duration=\"785000\" />\r\n      <workItem from=\"1672995266180\" duration=\"2669000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ade44bf9e247bd795f7cab55574ef7be8a89474a)
+++ b/.idea/workspace.xml	(date 1673339206722)
@@ -4,7 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="51fa20b6-3b81-48b4-b630-6d9537a82373" name="Changes" comment="" />
+    <list default="true" id="51fa20b6-3b81-48b4-b630-6d9537a82373" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/BLL/MovieManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/BLL/MovieManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/DAL/IMovieDataAccess.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/DAL/IMovieDataAccess.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/DAL/db/MovieDAO_DB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/DAL/db/MovieDAO_DB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GUI/Controller/NewMovieController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GUI/Controller/NewMovieController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GUI/Controller/PrivateMovieController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GUI/Controller/PrivateMovieController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/GUI/Model/MovieModel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/GUI/Model/MovieModel.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
